#!/bin/bash

# extract select data from bundles:
#  -CSV's
#  -TODO: role data
set -ex

function extract_bundle {
    local IN_DIR=$1
    local OUT_DIR=$2
    for X in $(file ${IN_DIR}/* | grep gzip | cut -f 1 -d ':'); do
        tar xvf $X -C ${OUT_DIR}/;
    done
}

OUT_DATA=bindata
EXTRACT_DIR=tmp/bindata

mkdir -p "$EXTRACT_DIR"
mkdir -p "$OUT_DATA/crds"

for BUNDLE in $(hack/pin-bundle-images.sh | tr "," " "); do
    skopeo copy "docker://$BUNDLE" dir:${EXTRACT_DIR}/tmp;
    extract_bundle "${EXTRACT_DIR}/tmp" "${OUT_DATA}/"
done

cd "$OUT_DATA"
# copy CRDS into crds basedir
grep -l CustomResourceDefinition manifests/* | xargs -I % sh -c 'cp % ./crds/'

# extract role, clusterRole, and deployment from CSV's
for X in $(ls manifests/*clusterserviceversion.yaml); do
        echo $OPERATOR_NAME
        OPERATOR_NAME=$(echo $X | sed -e "s|manifests\/\([^\.]*\)\..*|\1|")
        LEADER_ELECTION_ROLE_RULES=$(cat $X | yq -r .spec.install.spec.permissions | sed -e 's|- rules:|rules:|' | sed -e 's|    ||' | sed -e '/  serviceAccountName.*/d'
)
        CLUSTER_ROLE_RULES=$(cat $X | yq -r .spec.install.spec.clusterPermissions| sed -e 's|- rules:|rules:|' | sed -e 's|    ||' | sed -e '/  serviceAccountName.*/d'
)

mkdir -p rbac
cat > rbac/$OPERATOR_NAME-rbac.yaml <<EOF_CAT
# NOTE: this file is automatically generated by hack/sync-bindata.sh!
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${OPERATOR_NAME}-controller-manager
  namespace: '{{ .OperatorNamespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ${OPERATOR_NAME}-leader-election-role
  namespace: '{{ .OperatorNamespace }}'
${LEADER_ELECTION_ROLE_RULES}
--- 
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: ${OPERATOR_NAME}-manager-role
${CLUSTER_ROLE_RULES}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${OPERATOR_NAME}-leader-election-rolebinding
  namespace: '{{ .OperatorNamespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${OPERATOR_NAME}-leader-election-role
subjects:
- kind: ServiceAccount
  name: ${OPERATOR_NAME}-controller-manager
  namespace: '{{ .OperatorNamespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${OPERATOR_NAME}-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${OPERATOR_NAME}-manager-role
subjects:
- kind: ServiceAccount
  name: ${OPERATOR_NAME}-controller-manager
  namespace: '{{ .OperatorNamespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${OPERATOR_NAME}-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${OPERATOR_NAME}-proxy-role
subjects:
- kind: ServiceAccount
  name: ${OPERATOR_NAME}-controller-manager
  namespace: '{{ .OperatorNamespace }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: ${OPERATOR_NAME}-controller-manager-metrics-service
  namespace: '{{ .OperatorNamespace }}'
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    openstack.org/operator-name: ${OPERATOR_NAME}
EOF_CAT
done

# generate config/operator/manager_operator_images.yaml
cat > ../config/operator/manager_operator_images.yaml <<EOF_CAT
# NOTE: this file is automatically generated by hack/sync-bindata.sh!
#
# This patch inject custom ENV settings to the manager container
# Used to set our operator locations
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-operator
  namespace: system
spec:
  template:
    spec:
      containers:
      - name: operator
        env:
EOF_CAT

cat > ../hack/export_operator_related_images.sh <<EOF_CAT
# NOTE: this file is automatically generated by hack/sync-bindata.sh!

EOF_CAT

for X in $(ls manifests/*clusterserviceversion.yaml); do
        OPERATOR_NAME=$(echo $X | sed -e "s|manifests\/\([^\.]*\)\..*|\1|" | sed -e "s|-|_|g" | tr '[:lower:]' '[:upper:]' )
        echo $OPERATOR_NAME
        if [[ $OPERATOR_NAME == "RABBITMQ_CLUSTER_OPERATOR" ]]; then
            IMAGE=$(cat $X | yq -r .spec.install.spec.deployments[0].spec.template.spec.containers[0].image)
        else
            IMAGE=$(cat $X | yq -r .spec.install.spec.deployments[0].spec.template.spec.containers[1].image)
        fi
        echo $IMAGE


cat >> ../config/operator/manager_operator_images.yaml <<EOF_CAT
        - name: RELATED_IMAGE_${OPERATOR_NAME}_MANAGER_IMAGE_URL
          value: ${IMAGE}
EOF_CAT

cat >> ../hack/export_operator_related_images.sh <<EOF_CAT
export RELATED_IMAGE_${OPERATOR_NAME}_MANAGER_IMAGE_URL=${IMAGE}
EOF_CAT

done

cd ..

# cleanup
rm -Rf "$EXTRACT_DIR"
rm -Rf "$OUT_DATA/manifests"
rm -Rf "$OUT_DATA/metadata"
rm -Rf "$OUT_DATA/tests"
